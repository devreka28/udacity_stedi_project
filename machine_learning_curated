import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue import DynamicFrame

def sparkSqlQuery(glueContext, query, mapping, transformation_ctx) -> DynamicFrame:
    for alias, frame in mapping.items():
        frame.toDF().createOrReplaceTempView(alias)
    result = spark.sql(query)
    return DynamicFrame.fromDF(result, glueContext, transformation_ctx)
args = getResolvedOptions(sys.argv, ['JOB_NAME'])
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

# Script generated for node Step Trainer Trusted
StepTrainerTrusted_node1721893320504 = glueContext.create_dynamic_frame.from_options(format_options={"multiline": False}, connection_type="s3", format="json", connection_options={"paths": ["s3://udacitycoursero3/step_trainer/trusted/"], "recurse": True}, transformation_ctx="StepTrainerTrusted_node1721893320504")

# Script generated for node Accelerometer Trusted
AccelerometerTrusted_node1721893373605 = glueContext.create_dynamic_frame.from_options(format_options={"multiline": False}, connection_type="s3", format="json", connection_options={"paths": ["s3://udacitycoursero3/accelerometer/trusted/"], "recurse": True}, transformation_ctx="AccelerometerTrusted_node1721893373605")

# Script generated for node Join
Join_node1721893461968 = Join.apply(frame1=AccelerometerTrusted_node1721893373605, frame2=StepTrainerTrusted_node1721893320504, keys1=["timeStamp"], keys2=["sensorreadingtime"], transformation_ctx="Join_node1721893461968")

# Script generated for node SQL Query
SqlQuery0 = '''
select distinct a.* from myDataSource a

'''
SQLQuery_node1721893657499 = sparkSqlQuery(glueContext, query = SqlQuery0, mapping = {"myDataSource":Join_node1721893461968}, transformation_ctx = "SQLQuery_node1721893657499")

# Script generated for node Amazon S3
AmazonS3_node1721893710086 = glueContext.getSink(path="s3://udacitycoursero3/machine_learning/curated/", connection_type="s3", updateBehavior="UPDATE_IN_DATABASE", partitionKeys=[], enableUpdateCatalog=True, transformation_ctx="AmazonS3_node1721893710086")
AmazonS3_node1721893710086.setCatalogInfo(catalogDatabase="udacity_stedi_project",catalogTableName="machine_learning_curated")
AmazonS3_node1721893710086.setFormat("json")
AmazonS3_node1721893710086.writeFrame(SQLQuery_node1721893657499)
job.commit()
